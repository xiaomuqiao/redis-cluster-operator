// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deps_proto/deps.proto

/*
Package blaze_deps is a generated protocol buffer package.

It is generated from these files:
	deps_proto/deps.proto

It has these top-level messages:
	SourceLocation
	Dependency
	Dependencies
*/
package blaze_deps

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dependency_Kind int32

const (
	// Dependency used explicitly in the source.
	Dependency_EXPLICIT Dependency_Kind = 0
	// Dependency that is implicitly loaded and used by the compiler.
	Dependency_IMPLICIT Dependency_Kind = 1
	// Unused dependency.
	Dependency_UNUSED Dependency_Kind = 2
	// Implicit dependency considered by the compiler but not completed.
	Dependency_INCOMPLETE Dependency_Kind = 3
)

var Dependency_Kind_name = map[int32]string{
	0: "EXPLICIT",
	1: "IMPLICIT",
	2: "UNUSED",
	3: "INCOMPLETE",
}
var Dependency_Kind_value = map[string]int32{
	"EXPLICIT":   0,
	"IMPLICIT":   1,
	"UNUSED":     2,
	"INCOMPLETE": 3,
}

func (x Dependency_Kind) Enum() *Dependency_Kind {
	p := new(Dependency_Kind)
	*p = x
	return p
}
func (x Dependency_Kind) String() string {
	return proto.EnumName(Dependency_Kind_name, int32(x))
}
func (x *Dependency_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Dependency_Kind_value, data, "Dependency_Kind")
	if err != nil {
		return err
	}
	*x = Dependency_Kind(value)
	return nil
}
func (Dependency_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// A specific location within a source file.
type SourceLocation struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	Line             *int32  `protobuf:"varint,2,opt,name=line" json:"line,omitempty"`
	Column           *int32  `protobuf:"varint,3,opt,name=column" json:"column,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SourceLocation) Reset()                    { *m = SourceLocation{} }
func (m *SourceLocation) String() string            { return proto.CompactTextString(m) }
func (*SourceLocation) ProtoMessage()               {}
func (*SourceLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SourceLocation) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *SourceLocation) GetLine() int32 {
	if m != nil && m.Line != nil {
		return *m.Line
	}
	return 0
}

func (m *SourceLocation) GetColumn() int32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

type Dependency struct {
	// Path to the artifact representing this dependency.
	Path *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	// Dependency kind
	Kind *Dependency_Kind `protobuf:"varint,2,req,name=kind,enum=blaze_deps.Dependency_Kind" json:"kind,omitempty"`
	// Source file locations: compilers can pinpoint the uses of a dependency.
	Location         []*SourceLocation `protobuf:"bytes,3,rep,name=location" json:"location,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Dependency) Reset()                    { *m = Dependency{} }
func (m *Dependency) String() string            { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()               {}
func (*Dependency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Dependency) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *Dependency) GetKind() Dependency_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Dependency_EXPLICIT
}

func (m *Dependency) GetLocation() []*SourceLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

// Top-level message found in .deps artifacts
type Dependencies struct {
	Dependency []*Dependency `protobuf:"bytes,1,rep,name=dependency" json:"dependency,omitempty"`
	// Name of the rule being analyzed.
	RuleLabel *string `protobuf:"bytes,2,opt,name=rule_label,json=ruleLabel" json:"rule_label,omitempty"`
	// Whether the action was successful; even when compilation fails, partial
	// dependency information can be useful.
	Success *bool `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	// Packages contained in the output jar, sorted alphabetically.
	ContainedPackage []string `protobuf:"bytes,4,rep,name=contained_package,json=containedPackage" json:"contained_package,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Dependencies) Reset()                    { *m = Dependencies{} }
func (m *Dependencies) String() string            { return proto.CompactTextString(m) }
func (*Dependencies) ProtoMessage()               {}
func (*Dependencies) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Dependencies) GetDependency() []*Dependency {
	if m != nil {
		return m.Dependency
	}
	return nil
}

func (m *Dependencies) GetRuleLabel() string {
	if m != nil && m.RuleLabel != nil {
		return *m.RuleLabel
	}
	return ""
}

func (m *Dependencies) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *Dependencies) GetContainedPackage() []string {
	if m != nil {
		return m.ContainedPackage
	}
	return nil
}

func init() {
	proto.RegisterType((*SourceLocation)(nil), "blaze_deps.SourceLocation")
	proto.RegisterType((*Dependency)(nil), "blaze_deps.Dependency")
	proto.RegisterType((*Dependencies)(nil), "blaze_deps.Dependencies")
	proto.RegisterEnum("blaze_deps.Dependency_Kind", Dependency_Kind_name, Dependency_Kind_value)
}

func init() { proto.RegisterFile("deps_proto/deps.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x5f, 0x6b, 0xd4, 0x40,
	0x14, 0xc5, 0xcd, 0x1f, 0xeb, 0xe6, 0x5a, 0x96, 0x38, 0x60, 0x19, 0x14, 0x21, 0xe4, 0x29, 0x28,
	0x4c, 0xa1, 0x0f, 0x7d, 0xf4, 0xc1, 0x36, 0x0f, 0xc1, 0xb4, 0x86, 0x69, 0x0b, 0xbe, 0x85, 0x64,
	0xe6, 0xb2, 0x0e, 0x9d, 0xce, 0x84, 0x4d, 0xb2, 0xa2, 0x9f, 0xc9, 0x2f, 0xe2, 0xb7, 0x92, 0xcc,
	0xae, 0xd9, 0x2d, 0xec, 0xdb, 0x39, 0x27, 0xe7, 0x5e, 0x7e, 0xb9, 0x0c, 0xbc, 0x95, 0xd8, 0xf5,
	0x75, 0xb7, 0xb6, 0x83, 0x3d, 0x9f, 0x24, 0x73, 0x92, 0x40, 0xab, 0x9b, 0xdf, 0x58, 0x4f, 0x49,
	0x5a, 0xc1, 0xf2, 0xce, 0x8e, 0x6b, 0x81, 0xa5, 0x15, 0xcd, 0xa0, 0xac, 0x21, 0x04, 0xc2, 0xae,
	0x19, 0x7e, 0x50, 0x2f, 0xf1, 0xb3, 0x88, 0x3b, 0x3d, 0x65, 0x5a, 0x19, 0xa4, 0x7e, 0xe2, 0x65,
	0x2f, 0xb9, 0xd3, 0xe4, 0x0c, 0x4e, 0x84, 0xd5, 0xe3, 0x93, 0xa1, 0x81, 0x4b, 0x77, 0x2e, 0xfd,
	0xeb, 0x01, 0x5c, 0x63, 0x87, 0x46, 0xa2, 0x11, 0xbf, 0x8e, 0xae, 0x3b, 0x87, 0xf0, 0x51, 0x19,
	0x49, 0xfd, 0xc4, 0xcf, 0x96, 0x17, 0xef, 0xd9, 0x9e, 0x87, 0xed, 0x27, 0xd9, 0x57, 0x65, 0x24,
	0x77, 0x45, 0x72, 0x09, 0x0b, 0xbd, 0xe3, 0xa3, 0x41, 0x12, 0x64, 0xaf, 0x2f, 0xde, 0x1d, 0x0e,
	0x3d, 0xff, 0x03, 0x3e, 0x77, 0xd3, 0xcf, 0x10, 0x4e, 0x5b, 0xc8, 0x29, 0x2c, 0xf2, 0xef, 0x55,
	0x59, 0x5c, 0x15, 0xf7, 0xf1, 0x8b, 0xc9, 0x15, 0x37, 0x3b, 0xe7, 0x11, 0x80, 0x93, 0x87, 0xdb,
	0x87, 0xbb, 0xfc, 0x3a, 0xf6, 0xc9, 0x12, 0xa0, 0xb8, 0xbd, 0xfa, 0x76, 0x53, 0x95, 0xf9, 0x7d,
	0x1e, 0x07, 0xe9, 0x1f, 0x0f, 0x4e, 0x67, 0x22, 0x85, 0x3d, 0xb9, 0x04, 0x90, 0x33, 0x21, 0xf5,
	0x1c, 0xca, 0xd9, 0x71, 0x7e, 0x7e, 0xd0, 0x24, 0x1f, 0x00, 0xd6, 0xa3, 0xc6, 0x5a, 0x37, 0x2d,
	0x6a, 0x77, 0xc6, 0x88, 0x47, 0x53, 0x52, 0x4e, 0x01, 0xa1, 0xf0, 0xaa, 0x1f, 0x85, 0xc0, 0xbe,
	0x77, 0xc7, 0x5c, 0xf0, 0xff, 0x96, 0x7c, 0x82, 0x37, 0xc2, 0x9a, 0xa1, 0x51, 0x06, 0x65, 0xdd,
	0x35, 0xe2, 0xb1, 0x59, 0x21, 0x0d, 0x93, 0x20, 0x8b, 0x78, 0x3c, 0x7f, 0xa8, 0xb6, 0xf9, 0x97,
	0x8f, 0x90, 0x09, 0xfb, 0xc4, 0x56, 0xd6, 0xae, 0x34, 0x32, 0x89, 0x9b, 0xc1, 0x5a, 0xdd, 0xb3,
	0x76, 0x54, 0x5a, 0x32, 0xad, 0x5a, 0xb6, 0x51, 0xf8, 0x73, 0xfb, 0x08, 0xfe, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xca, 0x96, 0x89, 0xb3, 0x1c, 0x02, 0x00, 0x00,
}
